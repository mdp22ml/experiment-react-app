import OpenAI from "openai";

// Initialize OpenAI client with your secret key from environment
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * API Route: /api/generateProtocol
 * Accepts POST requests with experiment data in the body and returns
 * a detailed, step-by-step protocol generated by OpenAI.
 */
export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.setHeader("Allow", ["POST"]);
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { experimentTitle, goal, methods, analysisTypes } = req.body;

  if (!experimentTitle || !goal || !methods) {
    return res.status(400).json({ error: "Missing required fields: experimentTitle, goal, or methods" });
  }

  // Build the user prompt for OpenAI
  const prompt = `You are a professional lab protocol writer. Based on the following information, generate a detailed experimental protocol with exactly the sections listed:

Title: ${experimentTitle}
Goal: ${goal}
Design Rationale: ${methods}
Analysis Types: ${Array.isArray(analysisTypes) ? analysisTypes.join(", ") : analysisTypes || "Not specified"}

---

1. üî¨ What you'll need - list all materials, equipment, and exact quantities, temperatures, volumes, etc.
2. üìã Step-by-Step Procedure - number each step clearly, include timings, temperatures, concentrations.
3. üß™ Data Analysis - instructions on how to process and analyze the collected data.
4. ‚ö†Ô∏è Important Tips & Safety - list any precautions and critical notes.

Respond in plain text, clearly labeled sections as above.`;

  try {
    // Call OpenAI's chat completion endpoint
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: "You are an expert lab protocol assistant." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
    });

    const protocolText = completion.choices[0].message.content;
    return res.status(200).json({ protocol: protocolText });
  } catch (error) {
    console.error("OpenAI API error in /api/generateProtocol:", error);
    return res.status(500).json({ error: "Failed to generate protocol" });
  }
}
